#!/bin/sh

PACKAGE_NAME='dealer'

prefix='/usr/local'
prefix_help='Install architecture independent files' 
exec_prefix='${prefix}'
exec_prefix_help='Install architecture dependent files' 
bindir='${exec_prefix}/bin'
bindir_help='User executables' 
datarootdir='${prefix}/share'
datarootdir_help='Architecture independent data'
datadir='${datarootdir}/'${PACKAGE_NAME}
datadir_help='Application data directory'
sysconfdir='${prefix}/etc'
sysconfdir_help='Single machine configuration'
localstatedir='${prefix}/var'
localstatedir_help='Single machine modifiable data'
includedir='${prefix}/include'
includedir_help='C header files'
docdir='${datarootdir}/doc/'${PACKAGE_NAME}
docdir_help='Documentation root'
libdir='${exec_prefix}/lib'
libdir_help='Object code libraries'
libexecdir='${exec_prefix}/libexec'
libexecdir_help='Program executables'
localedir='${datarootdir}/locale'
localedir_help='Locale depend data'
mandir='${datarootdir}/man'
mandir_help='man documentation'
host='${build}'
host_help='Cross-compiler prefix for target system'
build=''
build_help='Host system compiler prefix'
utf8=''
utf8_help='Setting to yes forces UTF-8 output support.'

pathlist="prefix exec_prefix bindir datarootdir datadir sysconfdir includedir docdir libdir libexecdir localedir mandir host build utf8"
varlist="CC CXX CFLAGS CXXFLAGS CPPFLAGS LDFLAGS"

print_help () {
	echo "Configure ${PACKAGE_NAME} to build in your system

Usage: $0 [OPTION]... [VAR=VALUE]...

Configure:
\t--help\t\t\tdisplay this help and exit

Installation directories:"
	for var_name in $pathlist; do
		eval var_val=\$$var_name
		var_help="${var_name}_help"
		eval var_help=\$$var_help
		arg="--$var_name=path"
		if [ ${#arg} -lt 16 ]; then
			arg="$arg\t"
		fi
		echo "\t$arg\t$var_help [$var_val]"
	done
	exit 0
}

varlist2=""
# Read environment variables
for var_name in $varlist; do
	eval var_val=\$$var_name
	if [ -n "$var_val" ]; then
		varlist2="$varlist2 $var_name"
	fi
done
varlist=$varlist2

# Read parameters
while [ $# -gt 0 ]; do
	case $1 in
	--*=* | --*=)
		arg=`expr "X$1" : '^X\([^=]*\)='`
		arg_opt=`expr "$1" : '^[^=]*=\(.*\)$'`
		arg_shift=;
		;;
	--*)
		arg=$1
		arg_opt=$2
		arg_shift=shift
		;;
	*)
		arg=$1
		arg_opt=
		arg_shift=;
		;;
	esac
	for var_name in $pathlist; do
		if [ "x--$var_name" = "x$arg" ]; then
			eval $var_name=\"$arg_opt\"
			shift
			$arg_shift
			continue 2
		fi
	done
	case $arg in
	--help)
		print_help;;
	--*)
		echo "$0: error - unrecognized option $arg" 1>&2; exit 1;;
	*=*)
		# TODO parse variable substitutes
		new_var=`expr "X$1" : '^X\([^=]*\)='`
		new_val=`expr "$1" : '^[^=]*=\(.*\)$'`
		varlist="$varlist $new_var"
		eval $new_var=\"$new_val\"
		;;
	*)
		echo "$0: error - I don't know what to do with $arg" 1>&2; exit 1;;
	esac
	shift
	$arg_shift
done

# Expand variables in paths
for var_name in $pathlist; do
	eval var_val=\$${var_name}
	eval $var_name=\"$var_val\"
done

# check if compiler prefix is missing dash
[ -n "$host" ] && lchr=`expr substr $host ${#host} 1` && [ "$lchr" != "-" ] && host="$host-"
[ -n "$build" ] && lchr=`expr substr $host ${#host} 1` && [ "$lchr" != "-" ] && build="$build-"

varlist="$pathlist $varlist"

# Write the configuration to build.mk
echo "#Automatically generated build configuration" > build.mk
for var_name in $varlist; do
	eval var_val=\$${var_name}
	echo "$var_name:=$var_val" >> build.mk
done
